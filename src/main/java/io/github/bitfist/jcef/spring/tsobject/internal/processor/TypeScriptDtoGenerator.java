package io.github.bitfist.jcef.spring.tsobject.internal.processor;

import org.jspecify.annotations.Nullable;

import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

class TypeScriptDtoGenerator {

	public String generate(TypeScriptClass tsClass, Map<String, TypeScriptClass> classModel) {
		var sb = new StringBuilder();

		// Header comment
		sb.append("/** AUTO-GENERATED by JCEF TypeScriptProcessor â€“ DO NOT EDIT **/\n\n");

		// Collect imports
		var imports = collectImports(tsClass, classModel);

		// Generate imports
		for (String importClass : imports) {
			var importedClass = findClassBySimpleName(importClass, classModel);
			if (importedClass != null) {
				String importPath = PathUtils.calculateRelativePath(tsClass.getOutputPath(), importedClass.getOutputPath(), importedClass.getTsClassName());
				sb.append("import type { ").append(importedClass.getTsClassName()).append(" } from '").append(importPath).append("';\n");
			}
		}

		if (!imports.isEmpty()) {
			sb.append("\n");
		}

		// Generate interface
		sb.append("export interface ").append(tsClass.getTsClassName()).append(" {\n");

		for (Field field : tsClass.getFields()) {
			sb.append("    ").append(field.name());
			if (field.isOptional()) {
				sb.append("?");
			}
			sb.append(": ").append(field.type()).append(";\n");
		}

		sb.append("}\n");

		return sb.toString();
	}

	private Set<String> collectImports(TypeScriptClass tsClass,
	                                   Map<String, TypeScriptClass> classModel) {
		var imports = new TreeSet<String>();

		for (Field field : tsClass.getFields()) {
			var type = field.type();

			// Extract base type from arrays and generic types
			type = type.replaceAll("\\[\\]$", "");
			type = type.replaceAll("\\{.*\\}", "");

			// Check if this is a custom type that we're generating
			if (!isPrimitiveType(type) && findClassBySimpleName(type, classModel) != null) {
				imports.add(type);
			}
		}

		return imports;
	}

	private boolean isPrimitiveType(String type) {
		return type.equals("string") || type.equals("number") || type.equals("boolean") || type.equals("any") || type.equals("void") || type.contains("[") || type.contains("{");
	}

	private @Nullable TypeScriptClass findClassBySimpleName(String simpleName, Map<String, TypeScriptClass> classModel) {
		for (TypeScriptClass tsClass : classModel.values()) {
			if (tsClass.getTsClassName().equals(simpleName)) {
				return tsClass;
			}
		}
		return null;
	}
}