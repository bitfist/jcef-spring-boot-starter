package io.github.bitfist.jcef.spring.query.internal.processor;

import io.github.bitfist.jcef.spring.query.CefQueryHandler;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.junit.jupiter.MockitoExtension;
import org.mockito.Mock;
import org.junit.jupiter.api.extension.ExtendWith;

import javax.annotation.processing.Messager;
import javax.tools.Diagnostic.Kind;
import javax.lang.model.element.Name;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.type.TypeMirror;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Map;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class TsFileWriterTest {

    @TempDir
    Path tempDir;

    @Mock
    Messager log;

    private TsFileWriter writer;

    @BeforeEach
    void setUp() {
        writer = new TsFileWriter(log, tempDir);
    }

    @Test
    @DisplayName("üìù generate TS file skeleton with header & empty class")
    void shouldCreateSkeletonForEmptyHandler() throws IOException {
        // given
        TypeElement controller = mock(TypeElement.class);
        Name simpleName = mock(Name.class);
        when(simpleName.toString()).thenReturn("TestController");
        when(controller.getSimpleName()).thenReturn(simpleName);

        HandlerModel model = new HandlerModel(
                controller,
                "/api",
                "com.example",
                List.of(),
                Map.of()
        );

        // when
        writer.write(model);

        // then
        Path output = tempDir.resolve("com/example/TestController.ts");
        assertTrue(Files.exists(output), "TS file should be created");

        String content = Files.readString(output);
        assertTrue(content.startsWith("/** AUTO‚ÄëGENERATED by JCEF TypeScriptGeneratorProcessor ‚Äì DO NOT EDIT **/"), "Should have header");
        assertTrue(content.contains("import { CefQueryService } from '../../cef/CefQueryService';"), "Should import CefQueryService");
        assertTrue(content.contains("export class TestController"), "Should declare class");
        assertTrue(content.endsWith("}\n"), "Should close class");
        verify(log, never()).printMessage(any(Kind.class), any(CharSequence.class));
    }

    @Test
    @DisplayName("üîÑ include method stub for a single handler")
    void shouldWriteMethodStub() throws IOException {
        // given
        TypeElement controller = mock(TypeElement.class);
        Name controllerName = mock(Name.class);
        when(controllerName.toString()).thenReturn("TestController");
        when(controller.getSimpleName()).thenReturn(controllerName);

        // prepare one ExecutableElement
        ExecutableElement method = mock(ExecutableElement.class);
        // simulate @CefQueryHandler("do")
        CefQueryHandler ann = new CefQueryHandler() {
            @Override public String value() { return "do"; }
            @Override public Class<? extends java.lang.annotation.Annotation> annotationType() {
                return CefQueryHandler.class;
            }
        };
        when(method.getAnnotation(CefQueryHandler.class)).thenReturn(ann);

        Name methodName = mock(Name.class);
        when(methodName.toString()).thenReturn("doSomething");
        when(method.getSimpleName()).thenReturn(methodName);

        when(method.getParameters()).thenReturn(List.of()); // no params

        TypeMirror returnType = mock(TypeMirror.class);
        when(returnType.getKind()).thenReturn(javax.lang.model.type.TypeKind.VOID);
        when(method.getReturnType()).thenReturn(returnType);

        HandlerModel model = new HandlerModel(
                controller,
                "/api",
                "com.example",
                List.of(method),
                Map.of()
        );

        // when
        writer.write(model);

        // then
        Path output = tempDir.resolve("com/example/TestController.ts");
        String content = Files.readString(output);

        assertTrue(content.contains("/** route: /api/do */"), "Should document route");
        assertTrue(content.contains("static doSomething(): Promise<void>"), "Should declare Promise<void> method");
        assertTrue(content.contains("CefQueryService.request<void>(\"/api/do\", \"object\" as ResponseType)"), "Should call CefQueryService.request with correct args");

        verify(log, never()).printMessage(any(Kind.class), any(CharSequence.class));
    }
}
